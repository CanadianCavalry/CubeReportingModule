using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using CubeReportingModule.Models;
using System.Web.Security;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;

namespace CubeReportingModule.Pages
{
    public partial class ManageReports : System.Web.UI.Page
    {
        Repository repo = new Repository();

        protected void Page_Load(object sender, EventArgs e)
        {
            //MembershipUser currentUser = Membership.GetUser();
            //string username = currentUser.UserName;

            //if ((Roles.IsUserInRole("Admin")) || (Roles.IsUserInRole("SysAdmin")))
            //{
            //    Display.AutoGenerateDeleteButton = true;
            //}
        }

        public bool SetModifyVisibility(string creator)
        {
            //if ((Roles.IsUserInRole("Admin")) || (Roles.IsUserInRole("SysAdmin")))
            //{
            //    return true;
            //}

            return false;

            //if (creator == null)
            //{
            //    return false;
            //}

            //string currentUsername = Membership.GetUser().UserName;

            //bool visible = creator.Equals(currentUsername);

            //return visible;
        }

        public bool SetDeleteVisibility(string creator)
        {
            if ((Roles.IsUserInRole("Admin")) || (Roles.IsUserInRole("SysAdmin")))
            {
                return true;
            }

            if (creator == null)
            {
                return false;
            }

            string currentUsername = Membership.GetUser().UserName;

            bool visible = creator.Equals(currentUsername);

            return visible;
        }

        public IQueryable<GRAReport> GetReportsAsQuery()
        {
            IQueryable<GRAReport> allReports = repo.GRAReports.AsQueryable<GRAReport>().OrderBy(report => report.Name);
            return allReports;
        }

        public IEnumerable<GRAReport> GetReports()
        {
            IEnumerable<GRAReport> allReports = repo.GRAReports.OrderBy(report => report.Name);
            return allReports;
        }

        protected void Display_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            Display.PageIndex = e.NewPageIndex;
            DataBind();
        }

        // The id parameter name should allMatches the DataKeyNames value set on the control
        public void Display_UpdateItem(int id)
        {
            GRAReport item = null;
            // Load the item here, e.g. item = MyDataLayer.Find(id);
            AppContext db = new AppContext();
            item = db.GRAReports.Where(report => report.ReportId == id).FirstOrDefault();
            if (item == null)
            {
                // The item wasn't found
                ModelState.AddModelError("", String.Format("Item with id {0} was not found", id));
                return;
            }
            TryUpdateModel(item);
            if (ModelState.IsValid)
            {
                // Save changes here, e.g. MyDataLayer.SaveChanges();
                db.SaveChanges();

                int reportId = item.ReportId;

                LogWriter.createAccessLog(LogWriter.modifyReport + " " + reportId.ToString());
            }

            List<string> keywords = Global.GetTablesInFromClause(item.FromClause);

            //debug
            string fakeFrom = @"Org_Company Join AccessLogs join Reports 1=1";
            Debug.WriteLine("From: " + fakeFrom);
            Global.BreakStringOnKeywords(fakeFrom, keywords);
            //end debug

            //Session["Step"] = 2;
            //Session["GetReportName"] = toModify.Name;
            //Session["TableNames"];
            //Session["ColumnNames"] = toModify.SelectClause;
            //Session["Options"];
            //Session["Restrictions"];

            //Response.Redirect("CreateReport.aspx");
        }

        // The id parameter name should allMatches the DataKeyNames value set on the control
        public void Display_DeleteItem(int? id)
        {
            if (id == null)
            {
                return;
            }

            AppContext db = new AppContext();
            GRAReport reportToRemove = db.GRAReports.Where(report => report.ReportId == id).FirstOrDefault();

            int reportId = reportToRemove.ReportId;

            List<GRAScheduledEvent> allAssocEvents = db.GRAScheduledEvents.Where(schedEvent => schedEvent.ReportId == reportId).ToList();
            foreach (GRAScheduledEvent eventToRemove in allAssocEvents)
            {
                db.GRAScheduledEvents.Remove(eventToRemove);
            }

            List<GRAReportOption> allAssocOptions = db.GRAReportOptions.Where(option => option.ReportId == reportId).ToList();
            foreach (GRAReportOption optionToRemove in allAssocOptions)
            {
                db.GRAReportOptions.Remove(optionToRemove);
            }

            db.GRAReports.Remove(reportToRemove);
            db.SaveChanges();

            LogWriter.createAccessLog(LogWriter.deleteReport + " " + reportId.ToString());
        }

        protected void Modify_Click(object sender, EventArgs e)
        {
            Button button = (Button)sender;
            int reportId = Convert.ToInt32(Global.CleanInput(button.CommandArgument));
            Display_UpdateItem(reportId);
        }

        protected void Delete_Click(object sender, EventArgs e)
        {
            Button button = (Button)sender;
            int reportId = Convert.ToInt32(Global.CleanInput(button.CommandArgument));
            Display_DeleteItem(reportId);
        }
    }
}