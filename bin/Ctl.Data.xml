<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ctl.Data</name>
    </assembly>
    <members>
        <member name="T:Ctl.Data.AdditionalNamesAttribute">
            <summary>
            Specifies one or more additional column names that can be associated with this property or field.
            </summary>
        </member>
        <member name="M:Ctl.Data.AdditionalNamesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new AdditionalNamesAttribute.
            </summary>
            <param name="name">An additional name this column can go by.</param>
        </member>
        <member name="M:Ctl.Data.AdditionalNamesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new AdditionalNamesAttribute.
            </summary>
            <param name="names">Additional names this column can go by.</param>
        </member>
        <member name="P:Ctl.Data.AdditionalNamesAttribute.Names">
            <summary>
            Additional names which can be assigned to the associated property or field.
            </summary>
        </member>
        <member name="T:Ctl.Data.BufferedWriter">
            <summary>
            Provides a base for buffered data writers.
            </summary>
        </member>
        <member name="T:Ctl.Data.CsvOptions">
            <summary>
            A set of options for reading CSV.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvOptions.Separator">
            <summary>
            The column separator.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvOptions.ParseMidQuotes">
            <summary>
            If true, unescaped quotes in the middle of a quoted value are assumed to be part of the value. Otherwise, require strict escaping.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvOptions.BufferLength">
            <summary>
            The internal buffer length to use. Higher values will trade memory for performance.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvOptions.TrimWhitespace">
            <summary>
            If true, leading and trailing whitespace will be trimmed from column values.
            Values consisting of only whitespace will be returned as null.
            </summary>
        </member>
        <member name="T:Ctl.Data.CsvObjectOptions">
            <summary>
            A set of options for reading objects from CSV.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvObjectOptions.FormatProvider">
            <summary>
            A format provider used to deserialize objects.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvObjectOptions.ReadHeader">
            <summary>
            If true, read a header. Otherwise, use column indexes.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvObjectOptions.HeaderComparer">
            <summary>
            A comparer used to match header values to property names.
            </summary>
        </member>
        <member name="P:Ctl.Data.CsvObjectOptions.Validate">
            <summary>
            If true, validate objects to conform to their data annotations.
            </summary>
        </member>
        <member name="T:Ctl.Data.IgnoreSpacesComparer">
            <summary>
            Compares 
            </summary>
        </member>
        <member name="T:Ctl.Data.PositionAttribute">
            <summary>
            Specifies an exact column index to read a member from.
            </summary>
        </member>
        <member name="M:Ctl.Data.PositionAttribute.#ctor(System.Int32)">
            <param name="columnIndex">The index to read this member from.</param>
        </member>
        <member name="T:Ctl.Data.ColumnValue">
            <summary>
            The value of a single column in a record.
            </summary>
        </member>
        <member name="M:Ctl.Data.ColumnValue.#ctor">
            <summary>
            Instantiates a new ColumnValue instance.
            </summary>
        </member>
        <member name="M:Ctl.Data.ColumnValue.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Instantiates a new ColumnValue instance.
            </summary>
            <param name="value">The value of this column.</param>
            <param name="lineNumber">The 1-based line index this value started on.</param>
            <param name="columnNumber">
            The 1-based column index this value started on.
            Note this counts UTF-16 code units, not grapheme clusters or even code points.
            </param>
        </member>
        <member name="M:Ctl.Data.ColumnValue.ToString">
            <summary>
            Gets the Value of this ColumnValue.
            </summary>
            <returns>The Value of this ColumnValue.</returns>
        </member>
        <member name="P:Ctl.Data.ColumnValue.Value">
            <summary>
            The value of this column.
            </summary>
        </member>
        <member name="P:Ctl.Data.ColumnValue.LineNumber">
            <summary>
            The 1-based line index this value started on.
            </summary>
        </member>
        <member name="P:Ctl.Data.ColumnValue.ColumnNumber">
            <summary>
            The 1-based column index this value started on.
            Note this counts UTF-16 code units, not grapheme clusters or even code points.
            </summary>
        </member>
        <member name="T:Ctl.Data.Infrastructure.CsvHeaderIndex">
            <summary>
            Maps a serialized index to a member index, for headered formats which can have their column indexes reordered.
            </summary>
        </member>
        <member name="T:Ctl.Data.CsvReader">
            <summary>
            Reads raw CSV records from a TextReader.
            </summary>
            <remarks>
            This reads unquoted and quoted CSV. Quoted CSV may contain newlines. Quotes inside of quotes
            will be considered part of a record if they are not immediately followed by a separator or newline.
            </remarks>
        </member>
        <member name="T:Ctl.Data.IDataReader">
            <summary>
            A data row reader.
            </summary>
        </member>
        <member name="T:Ctl.Data.IStreamingReader">
            <summary>
            A streaming reader.
            </summary>
        </member>
        <member name="M:Ctl.Data.IStreamingReader.Read">
            <summary>
            Reads a record.
            </summary>
            <returns>If a record was read, true. Otherwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.IStreamingReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a record.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>If a record was read, true. Otherwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.IStreamingReader.TryRead">
            <summary>
            Tries to read a record using buffered data, without performing any I/O.
            </summary>
            <returns>If a record was read, true. Otherwise, false to indicate an exhausted buffer, indicating ReadAsync() should be called again.</returns>
        </member>
        <member name="P:Ctl.Data.IDataReader.CurrentRow">
            <summary>
            The record read.
            </summary>
        </member>
        <member name="M:Ctl.Data.CsvReader.#ctor(System.IO.TextReader,System.Char,System.Boolean)">
            <summary>
            Instantiates a new CsvReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="separator">The column separator.</param>
            <param name="parseMidQuotes">If true, unescaped quotes in the middle of a quoted value are assumed to be part of the value. Otherwise, require strict escaping.</param>
        </member>
        <member name="M:Ctl.Data.CsvReader.#ctor(System.IO.TextReader,System.Char,System.Boolean,System.Int32)">
            <summary>
            Instantiates a new CsvReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="separator">The column separator.</param>
            <param name="parseMidQuotes">If true, unescaped quotes in the middle of a quoted value are assumed to be part of the value. Otherwise, require strict escaping.</param>
            <param name="bufferLength">The buffer length to use while reading.</param>
        </member>
        <member name="M:Ctl.Data.CsvReader.#ctor(System.IO.TextReader,Ctl.Data.CsvOptions)">
            <summary>
            Instantiates a new CsvReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="options">Options to use when reading the file. If not specified, default options will be used.</param>
        </member>
        <member name="M:Ctl.Data.CsvReader.Read">
            <summary>
            Reads a record.
            </summary>
            <returns>If a record was read, true. Otehrwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.CsvReader.TryRead">
            <summary>
            Tries to read a record using buffered data, without performing any I/O.
            </summary>
            <returns>If a record was read, true. Otherwise, false to indicate an exhausted buffer, indicating ReadAsync() should be called again.</returns>
        </member>
        <member name="M:Ctl.Data.CsvReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a record.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>If a record was read, true. Otehrwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.CsvReader.Parse">
            <remarks>
            keeping it all in one method is for performance. goto is for performance. thanks for understanding :)
            </remarks>
        </member>
        <member name="P:Ctl.Data.CsvReader.CurrentRow">
            <summary>
            The record read.
            </summary>
        </member>
        <member name="T:Ctl.Data.CsvReader`1">
            <summary>
            Reads serialized objects from a TextReader
            </summary>
            <typeparam name="T">The type of object to read.</typeparam>
            <remarks>
            Any public fields or properties not annotated with NotMapped will be read. Properties must have a public getter and setter.
            The Column annotation is recognized to map members to differently named columns, and to customize their order.
            </remarks>
        </member>
        <member name="T:Ctl.Data.HeaderedObjectReader`1">
            <summary>
            An object reader that operates on headered data.
            </summary>
            <typeparam name="T">The type to read.</typeparam>
        </member>
        <member name="T:Ctl.Data.ObjectReader`1">
            <summary>
            Provides a base class for IDataReaders which perform object deserialization.
            </summary>
            <typeparam name="T">The type of object to read.</typeparam>
        </member>
        <member name="M:Ctl.Data.ObjectReader`1.#ctor(System.IFormatProvider,System.Boolean)">
            <summary>
            Instantiates a new ObjectReader instance.
            </summary>
            <param name="formatProvider">The format provider to use for deserialization.</param>
            <param name="validate">If true, objects are validated.</param>
        </member>
        <member name="M:Ctl.Data.ObjectReader`1.Deserialize(Ctl.Data.RowValue)">
            <summary>
            Deserializes a row into an object.
            </summary>
            <param name="row">The row to deserialize.</param>
        </member>
        <member name="P:Ctl.Data.ObjectReader`1.CurrentObject">
            <summary>
            The object read.
            </summary>
        </member>
        <member name="T:Ctl.Data.IDataReader`1">
            <summary>
            An object reader.
            </summary>
            <typeparam name="T">The type of object to read.</typeparam>
        </member>
        <member name="P:Ctl.Data.IDataReader`1.CurrentObject">
            <summary>
            The object read.
            </summary>
        </member>
        <member name="M:Ctl.Data.HeaderedObjectReader`1.#ctor(Ctl.Data.IDataReader,System.IFormatProvider,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new HeaderedObjectReader.
            </summary>
            <param name="reader">The IDataReader to read from.</param>
            <param name="formatProvider">A format provider used to deserialize objects.</param>
            <param name="readHeader">If true, read a header. Otherwise, use column indexes.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
        </member>
        <member name="M:Ctl.Data.HeaderedObjectReader`1.#ctor(Ctl.Data.IDataReader,System.IFormatProvider,System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new HeaderedObjectReader.
            </summary>
            <param name="reader">The IDataReader to read from.</param>
            <param name="formatProvider">A format provider used to deserialize objects.</param>
            <param name="readHeader">If true, read a header. Otherwise, use column indexes.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
            <param name="headerComparer">Used when comparing header values to property names. If null, the InvariantCultureIgnoreCase comparer will be used.</param>
        </member>
        <member name="M:Ctl.Data.HeaderedObjectReader`1.Read">
            <summary>
            Reads a record.
            </summary>
            <returns>If a record was read, true. Otherwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.HeaderedObjectReader`1.TryRead">
            <summary>
            Tries to read a record using buffered data, without performing any I/O.
            </summary>
            <returns>If a record was read, true. Otherwise, false to indicate an exhausted buffer, indicating ReadAsync() should be called again.</returns>
        </member>
        <member name="M:Ctl.Data.HeaderedObjectReader`1.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a record.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>If a record was read, true. Otherwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.CsvReader`1.#ctor(System.IO.TextReader,System.IFormatProvider,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new CsvReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="formatProvider">A format provider used to deserialize objects.</param>
            <param name="separator">The column separator.</param>
            <param name="parseMidQuotes">If true, unescaped quotes in the middle of a quoted value are assumed to be part of the value. Otherwise, require strict escaping.</param>
            <param name="readHeader">If true, read a header. Otherwise, use column indexes.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
        </member>
        <member name="M:Ctl.Data.CsvReader`1.#ctor(System.IO.TextReader,System.IFormatProvider,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new CsvReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="formatProvider">A format provider used to deserialize objects.</param>
            <param name="separator">The column separator.</param>
            <param name="parseMidQuotes">If true, unescaped quotes in the middle of a quoted value are assumed to be part of the value. Otherwise, require strict escaping.</param>
            <param name="readHeader">If true, read a header. Otherwise, use column indexes.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
            <param name="bufferLength">The internal buffer length to use. Higher values will trade memory for performance.</param>
        </member>
        <member name="M:Ctl.Data.CsvReader`1.#ctor(System.IO.TextReader,Ctl.Data.CsvObjectOptions)">
            <summary>
            Initializes a new CsvReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="options">A set of options to use. If not specified, defaults will be used.</param>
        </member>
        <member name="T:Ctl.Data.CsvWriter">
            <summary>
            Writes raw CSV records.
            </summary>
        </member>
        <member name="T:Ctl.Data.IDataWriter">
            <summary>
            A data row writer.
            </summary>
        </member>
        <member name="T:Ctl.Data.IStreamingWriter">
            <summary>
            A streaming writer.
            </summary>
        </member>
        <member name="M:Ctl.Data.IStreamingWriter.Close">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.IStreamingWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.IStreamingWriter.Flush">
            <summary>
            Flushes any buffered data to the underlying storage, and flushes the storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.IStreamingWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes any buffered data to the underlying storage, and flushes the storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="P:Ctl.Data.IStreamingWriter.HasWrittenRows">
            <summary>
            True if the writer has written any rows yet.
            </summary>
        </member>
        <member name="M:Ctl.Data.IDataWriter.WriteRow(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a row.
            </summary>
            <param name="row">The row to write.</param>
        </member>
        <member name="M:Ctl.Data.IDataWriter.WriteRowAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Writes a row.
            </summary>
            <param name="row">The row to write.</param>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.CsvWriter.#ctor(System.IO.TextWriter,System.Char)">
            <summary>
            Initializes a new CsvWriter.
            </summary>
            <param name="writer">The TextWriter to output to.</param>
            <param name="separator">The separator to use between record values.</param>
            <remarks>The TextWriter is not disposed of by CsvWriter.</remarks>
        </member>
        <member name="M:Ctl.Data.CsvWriter.WriteRow(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a row.
            </summary>
            <param name="row">The row to write.</param>
        </member>
        <member name="M:Ctl.Data.CsvWriter.WriteRowAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Writes a row.
            </summary>
            <param name="row">The row to write.</param>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.CsvWriter.Close">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.CsvWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.CsvWriter.Flush">
            <summary>
            Flushes any buffered data to the TextWriter, and flushes the TextWriter.
            </summary>
        </member>
        <member name="M:Ctl.Data.CsvWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes any buffered data to the TextWriter, and flushes the TextWriter.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="P:Ctl.Data.CsvWriter.HasWrittenRows">
            <summary>
            True if the writer has written any rows yet.
            </summary>
        </member>
        <member name="T:Ctl.Data.CsvWriter`1">
            <summary>
            Writes serialized objects to CSV.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
            <remarks>
            Any public fields or properties not annotated with NotMapped will be written. Properties must have a public getter and setter.
            The ColumnAttribute annotation is also recognized to map members to differently named columns.
            The DataFormatAttribute annotation can be used to specify write formats for objects implementing IFormattable.
            </remarks>
        </member>
        <member name="T:Ctl.Data.IDataWriter`1">
            <summary>
            An object writer.
            </summary>
            <typeparam name="T">The type of object to write.</typeparam>
        </member>
        <member name="M:Ctl.Data.IDataWriter`1.WriteObject(`0)">
            <summary>
            Writes an object.
            </summary>
            <param name="item">The object to write.</param>
        </member>
        <member name="M:Ctl.Data.IDataWriter`1.WriteObjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Writes an object.
            </summary>
            <param name="item">The object to write.</param>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.#ctor(System.IO.TextWriter,System.IFormatProvider,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new CsvWriter.
            </summary>
            <param name="writer">The TextWriter to output to.</param>
            <param name="formatProvider">A format provider to use for any types which implement IFormattable.</param>
            <param name="separator">The separator to use between record values.</param>
            <param name="writeHeaders">If true, headers will be written to the file. Otherwise, false.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
            <remarks>The TextWriter is not disposed of by CsvWriter.</remarks>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.WriteObject(`0)">
            <summary>
            Writes an object.
            </summary>
            <param name="item">The object to write.</param>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.WriteObjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Writes an object.
            </summary>
            <param name="item">The object to write.</param>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.WriteObjectsCompact(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes objects to the stream, excluding columns which are null for all objects.
            </summary>
            <param name="items">The items to write.</param>
            <remarks>
            This requires two passes through <paramref name="items"/>,
            so keep it lightweight if possible.
            </remarks>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.WriteObjectsCompactAsync(System.Collections.Generic.IAsyncEnumerable{`0})">
            <summary>
            Writes objects to the stream, excluding columns which are null for all objects.
            </summary>
            <param name="items">The items to write.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This requires two passes through <paramref name="items"/>,
            so keep it lightweight if possible.
            </remarks>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.WriteObjectsCompactAsync(System.Collections.Generic.IAsyncEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Writes objects to the stream, excluding columns which are null for all objects.
            </summary>
            <param name="items">The items to write.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This requires two passes through <paramref name="items"/>,
            so keep it lightweight if possible.
            </remarks>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.Close">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.Flush">
            <summary>
            Flushes any buffered data to the underlying storage, and flushes the storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.CsvWriter`1.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes any buffered data to the underlying storage, and flushes the storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="P:Ctl.Data.CsvWriter`1.HasWrittenRows">
            <summary>
            True if the writer has written any rows yet.
            </summary>
        </member>
        <member name="T:Ctl.Data.DataFormatAttribute">
            <summary>
            Specifies a custom format to use when serializing objects supporting IFormattable.
            </summary>
        </member>
        <member name="M:Ctl.Data.DataFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new DataFormatAttribute.
            </summary>
            <param name="format">A format to use when serializing objects supporting IFormattable, and used when deserializing objects with a compatible ParseExact method.</param>
        </member>
        <member name="M:Ctl.Data.DataFormatAttribute.#ctor(System.Globalization.NumberStyles)">
            <summary>
            Initializes a new DataFormatAttribute.
            </summary>
            <param name="numberStyles">If the type of the field/property implements a Parse method taking NumberStyles, this will be passed to it.</param>
        </member>
        <member name="M:Ctl.Data.DataFormatAttribute.#ctor(System.Globalization.NumberStyles,System.String)">
            <summary>
            Initializes a new DataFormatAttribute.
            </summary>
            <param name="numberStyles">If the type of the field/property implements a Parse method taking NumberStyles, this will be passed to it.</param>
            <param name="format">A format to use when serializing objects supporting IFormattable, and used when deserializing objects with a compatible ParseExact method.</param>
        </member>
        <member name="M:Ctl.Data.DataFormatAttribute.#ctor(System.Globalization.DateTimeStyles)">
            <summary>
            Initializes a new DataFormatAttribute.
            </summary>
            <param name="dateTimeStyles">If the type of the field/property implements a Parse method taking DateTimeStyles, this will be passed to it.</param>
        </member>
        <member name="M:Ctl.Data.DataFormatAttribute.#ctor(System.Globalization.DateTimeStyles,System.String)">
            <summary>
            Initializes a new DataFormatAttribute.
            </summary>
            <param name="dateTimeStyles">If the type of the field/property implements a Parse method taking DateTimeStyles, this will be passed to it.</param>
            <param name="format">A format to use when serializing objects supporting IFormattable, and used when deserializing objects with a compatible ParseExact method.</param>
        </member>
        <member name="P:Ctl.Data.DataFormatAttribute.Format">
            <summary>
            A format to use when serializing objects supporting IFormattable, and used when deserializing objects with a compatible ParseExact method.
            </summary>
        </member>
        <member name="P:Ctl.Data.DataFormatAttribute.NumberStyles">
            <summary>
            NumberStyles to use when deserializing supporting types.
            </summary>
        </member>
        <member name="P:Ctl.Data.DataFormatAttribute.DateTimeStyles">
            <summary>
            DateTimeStyles to use when deserializing supporting types.
            </summary>
        </member>
        <member name="T:Ctl.Data.FixedAttribute">
            <summary>
            Specifies the input/output width and position when using a fixed-width format.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new FixedAttribute.
            </summary>
            <param name="width">The data's width when using a fixed-width format.</param>
        </member>
        <member name="M:Ctl.Data.FixedAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new FixedAttribute.
            </summary>
            <param name="position">The 1-based index of the column of data when using a fixed-width format.</param>
            <param name="width">The data's width when using a fixed-width format.</param>
        </member>
        <member name="P:Ctl.Data.FixedAttribute.Position">
            <summary>
            The 1-based index of the column of data when using a fixed-width format.
            </summary>
        </member>
        <member name="P:Ctl.Data.FixedAttribute.Width">
            <summary>
            The width of data when using a fixed-width format.
            </summary>
        </member>
        <member name="T:Ctl.Data.FixedPosition">
            <summary>
            Defines an offset and length of a fixed-width column.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new FixedPosition.
            </summary>
            <param name="offset">The 1-based offset a fixed-width column starts on.</param>
            <param name="length">The length of the fixed-width column.</param>
        </member>
        <member name="P:Ctl.Data.FixedPosition.Offset">
            <summary>
            The 1-based offset a fixed-width column starts on.
            </summary>
        </member>
        <member name="P:Ctl.Data.FixedPosition.Length">
            <summary>
            The length of the fixed-width column.
            </summary>
        </member>
        <member name="T:Ctl.Data.FixedReader">
            <summary>
            Reads data rows from a fixed-width file.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedReader.#ctor(System.IO.TextReader,System.Collections.Generic.IEnumerable{Ctl.Data.FixedPosition},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new FixedReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="positions">Record item positions.</param>
            <param name="recordWidth">The total width of a record. If not specified, column widths specified in <paramref name="positions"/> will be used.</param>
            <param name="readNewLines">If true, newlines between records will be skipped.</param>
        </member>
        <member name="M:Ctl.Data.FixedReader.Read">
            <summary>
            Reads a record.
            </summary>
            <returns>If a record was read, true. Otehrwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.FixedReader.TryRead">
            <summary>
            Tries to read a record using buffered data, without performing any I/O.
            </summary>
            <returns>If a record was read, true. Otherwise, false to indicate an exhausted buffer, indicating ReadAsync() should be called again.</returns>
        </member>
        <member name="M:Ctl.Data.FixedReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a record.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>If a record was read, true. Otehrwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="P:Ctl.Data.FixedReader.CurrentRow">
            <summary>
            The record read.
            </summary>
        </member>
        <member name="T:Ctl.Data.FixedReader`1">
            <summary>
            Reads objects from a fixed-width file.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedReader`1.#ctor(System.IO.TextReader,System.IFormatProvider,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new FixedReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="formatProvider">A format provider used to deserialize objects.</param>
            <param name="readNewLines">If true, newlines between records will be skipped.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
        </member>
        <member name="M:Ctl.Data.FixedReader`1.Read">
            <summary>
            Reads a record.
            </summary>
            <returns>If a record was read, true. Otherwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.FixedReader`1.TryRead">
            <summary>
            Tries to read a record using buffered data, without performing any I/O.
            </summary>
            <returns>If a record was read, true. Otherwise, false to indicate an exhausted buffer, indicating ReadAsync() should be called again.</returns>
        </member>
        <member name="M:Ctl.Data.FixedReader`1.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a record.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>If a record was read, true. Otherwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="T:Ctl.Data.FixedWriter">
            <summary>
            Writes raw fixed-width records.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedWriter.#ctor(System.IO.TextWriter,System.Collections.Generic.IEnumerable{Ctl.Data.FixedPosition},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Instantiates a new FixedWriter.
            </summary>
            <param name="writer">The TextWriter to output to.</param>
            <param name="positions">Data item positions.</param>
            <param name="recordWidth">The total width of a record. If not specified, column widths specified in <paramref name="positions"/> will be used.</param>
            <param name="throwOnTruncation">If true, an exception will be thrown if a value would be truncated.</param>
            <param name="writeNewLines">If true, write newlines.</param>
        </member>
        <member name="M:Ctl.Data.FixedWriter.WriteRow(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a row.
            </summary>
            <param name="row">The row to write.</param>
        </member>
        <member name="M:Ctl.Data.FixedWriter.WriteRowAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Writes a row.
            </summary>
            <param name="row">The row to write.</param>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.FixedWriter.Close">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.FixedWriter.Flush">
            <summary>
            Flushes any buffered data to the TextWriter, and flushes the TextWriter.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes any buffered data to the TextWriter, and flushes the TextWriter.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="P:Ctl.Data.FixedWriter.HasWrittenRows">
            <summary>
            True if the writer has written any rows yet.
            </summary>
        </member>
        <member name="T:Ctl.Data.FixedWriter`1">
            <summary>
            Writes serialized objects to fixed-width.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
            <remarks>
            Any public fields or properties not annotated with NotMapped will be written. Properties must have a public getter and setter.
            The DataWidthAttribute annotation must be used to specify a member's width, otherwise it will be assumed to be 0.
            The DataFormatAttribute annotation can be used to specify write formats for objects implementing IFormattable.
            </remarks>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.#ctor(System.IO.TextWriter,System.Boolean,System.IFormatProvider,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new FixedWriter.
            </summary>
            <param name="writer">The TextWriter to output to.</param>
            <param name="throwOnTruncation">If true, an exception will be thrown if a value would be truncated.</param>
            <param name="formatProvider">A format provider to use for any types which implement IFormattable.</param>
            <param name="writeNewLines">If true, newlines will be written between records.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
            <remarks>The TextWriter is not disposed of by FixedWriter.</remarks>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.WriteObject(`0)">
            <summary>
            Writes an object.
            </summary>
            <param name="item">The object to write.</param>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.WriteObjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Writes an object.
            </summary>
            <param name="item">The object to write.</param>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.Close">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.Flush">
            <summary>
            Flushes any buffered data to the underlying storage, and flushes the storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.FixedWriter`1.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes any buffered data to the underlying storage, and flushes the storage.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="P:Ctl.Data.FixedWriter`1.HasWrittenRows">
            <summary>
            True if the writer has written any rows yet.
            </summary>
        </member>
        <member name="T:Ctl.Data.Formats">
            <summary>
            Encapsulates utility methods for quickly using a format without writing much boilerplate code.
            </summary>
        </member>
        <member name="F:Ctl.Data.Formats.Csv">
            <summary>
            Encapsulates utility methods for quickly using CSV without writing much boilerplate code.
            </summary>
        </member>
        <member name="F:Ctl.Data.Formats.Fixed">
            <summary>
            Encapsulates utility methods for quickly using fixed width without writing much boilerplate code.
            </summary>
        </member>
        <member name="T:Ctl.Data.Formats.Format">
            <summary>
            Encapsulates utility methods for quickly using a format without writing much boilerplate code.
            </summary>
        </member>
        <member name="T:Ctl.Data.StreamingReaderExtensions">
            <summary>
            Extensions for the IDataReader interface.
            </summary>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.ReadAsync(Ctl.Data.IStreamingReader)">
            <summary>
            Reads the next record from a streaming reader.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>If a record was read, true. Otherwise, false if the end of the input stream has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.AsEnumerable(Ctl.Data.IDataReader)">
            <summary>
            Transforms this reader into an enumerable of rows.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The reader as an enumerable.</returns>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.AsAsyncEnumerable(Ctl.Data.IDataReader)">
            <summary>
            Transforms this reader into an asynchronous enumerable of rows.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The reader as an asynchronous enumerable.</returns>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.AsEnumerable``1(Ctl.Data.IDataReader{``0})">
            <summary>
            Transforms this reader into an enumerable of objects.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The reader as an enumerable.</returns>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.AsAsyncEnumerable``1(Ctl.Data.IDataReader{``0})">
            <summary>
            Transforms this reader into an asynchronous enumerable of objects.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The reader as an enumerable.</returns>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.WithMaterializedErrors``1(System.Collections.Generic.IEnumerable{Ctl.Data.ObjectValue{``0}})">
            <summary>
            Filters a sequence of ObjectValues into plain values.
            If errors are encountered, the sequence is allowed to continue
            materializing to capture all errors in the sequence, followed
            by throwing AggregateException containing all errors.
            </summary>
            <typeparam name="T">The type of sequence to enumerate.</typeparam>
            <param name="values">The sequence to enumerate.</param>
            <returns>A sequence of values.</returns>
        </member>
        <member name="M:Ctl.Data.StreamingReaderExtensions.WithMaterializedErrors``1(System.Collections.Generic.IAsyncEnumerable{Ctl.Data.ObjectValue{``0}})">
            <summary>
            Filters a sequence of ObjectValues into plain values.
            If errors are encountered, the sequence is allowed to continue
            materializing to capture all errors in the sequence, followed
            by throwing AggregateException containing all errors.
            </summary>
            <typeparam name="T">The type of sequence to enumerate.</typeparam>
            <param name="values">The sequence to enumerate.</param>
            <returns>A sequence of values.</returns>
        </member>
        <member name="T:Ctl.Data.DataWriterExtensions">
            <summary>
            Extensions methods for the IDataWriter interface.
            </summary>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.CloseAsync(Ctl.Data.IStreamingWriter)">
            <summary>
            Closes the writer, flushing any buffered data to the underlying storage.
            </summary>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteRowAsync(Ctl.Data.IDataWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a row.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="row">The row to write.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteObjectAsync``1(Ctl.Data.IDataWriter{``0},``0)">
            <summary>
            Writes an object.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="item">The object to write.</param>
            <returns>A task representing the asynchronous write operation.</returns>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.FlushAsync(Ctl.Data.IStreamingWriter)">
            <summary>
            Flushes any buffered data to the underlying storage.
            </summary>
            <param name="writer">The writer to flush.</param>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteRows(Ctl.Data.IDataWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Writes rows.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="rows">The rows to write.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteObjects``1(Ctl.Data.IDataWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes objects.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="items">The items to write.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteRowsAsync(Ctl.Data.IDataWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Writes rows.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="rows">The rows to write.</param>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteRowsAsync(Ctl.Data.IDataWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Writes rows.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="rows">The rows to write.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteObjectsAsync``1(Ctl.Data.IDataWriter{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Writes objects.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="items">The items to write.</param>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteObjectsAsync``1(Ctl.Data.IDataWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes objects.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="items">The items to write.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteRowsAsync(Ctl.Data.IDataWriter,System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Writes rows.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="rows">The rows to write.</param>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteRowsAsync(Ctl.Data.IDataWriter,System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Writes rows.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="rows">The rows to write.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteObjectsAsync``1(Ctl.Data.IDataWriter{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Writes objects.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="items">The items to write.</param>
            <param name="token">A token used for cancellation.</param>
        </member>
        <member name="M:Ctl.Data.DataWriterExtensions.WriteObjectsAsync``1(Ctl.Data.IDataWriter{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Writes objects.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="items">The items to write.</param>
        </member>
        <member name="T:Ctl.Data.ObjectValue`1">
            <summary>
            A deserialized object value.
            </summary>
            <typeparam name="T">The type of object deserialized.</typeparam>
        </member>
        <member name="T:Ctl.Data.ObjectValue">
            <summary>
            A deserialized object value.
            </summary>
        </member>
        <member name="M:Ctl.Data.ObjectValue.#ctor">
            <summary>
            Instantiates a new ObjectValue.
            </summary>
        </member>
        <member name="M:Ctl.Data.ObjectValue.#ctor(Ctl.Data.Infrastructure.CsvHeaderIndex[],Ctl.Data.RowValue,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Instantiates a new ObjectValue for a deserialization error.
            </summary>
            <param name="memberIndexes">A list of member indexes.</param>
            <param name="rawValues">The raw row values which the deserialized object was read from.</param>
            <param name="exceptions">The errors which prevented an object from deserializing.</param>
        </member>
        <member name="P:Ctl.Data.ObjectValue.RowNumber">
            <summary>
            The 1-based index of the row in the stream.
            </summary>
        </member>
        <member name="P:Ctl.Data.ObjectValue.LineNumber">
            <summary>
            The 1-based line index this value started on.
            </summary>
        </member>
        <member name="P:Ctl.Data.ObjectValue.ColumnNumber">
            <summary>
            The 1-based column index this value started on.
            Note this counts UTF-16 code units, not grapheme clusters or even code points.
            </summary>
        </member>
        <member name="P:Ctl.Data.ObjectValue.RawValues">
            <summary>
            The raw row values which the deserialized object was read from.
            </summary>
        </member>
        <member name="P:Ctl.Data.ObjectValue.Exception">
            <summary>
            The Exception which caused deserialization to fail.
            </summary>
        </member>
        <member name="P:Ctl.Data.ObjectValue.HasUnvalidatedValue">
            <summary>
            If true, the object deserialized successfully but failed validation.
            UnvalidatedValue will contain the object.
            </summary>
        </member>
        <member name="M:Ctl.Data.ObjectValue`1.#ctor">
            <summary>
            Instantiates a new ObjectValue.
            </summary>
        </member>
        <member name="M:Ctl.Data.ObjectValue`1.#ctor(Ctl.Data.Infrastructure.CsvHeaderIndex[],Ctl.Data.RowValue,`0)">
            <summary>
            Instantiates a new ObjectValue.
            </summary>
            <param name="memberIndexes">A list of member indexes.</param>
            <param name="rawValues">The raw row values which the deserialized object was read from.</param>
            <param name="value">The deserialized object.</param>
        </member>
        <member name="M:Ctl.Data.ObjectValue`1.#ctor(Ctl.Data.Infrastructure.CsvHeaderIndex[],Ctl.Data.RowValue,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Instantiates a new ObjectValue for a deserialization error.
            </summary>
            <param name="memberIndexes">A list of member indexes.</param>
            <param name="rawValues">The raw row values which the deserialized object was read from.</param>
            <param name="exceptions">The errors which prevented an object from deserializing.</param>
        </member>
        <member name="M:Ctl.Data.ObjectValue`1.GetValueForMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Retrieves the column value for a specific member, if available.
            </summary>
            <typeparam name="TMember">The member's type.</typeparam>
            <param name="memberAccess">An expression returning a property or field to get a column value for.</param>
            <returns>The column value that would be mapped to that member.</returns>
        </member>
        <member name="P:Ctl.Data.ObjectValue`1.Value">
            <summary>
            The deserialized object.
            If deserialization resulted in an error, an exception will be thrown.
            </summary>
        </member>
        <member name="P:Ctl.Data.ObjectValue`1.UnvalidatedValue">
            <summary>
            A deserialized but unvalidated value.
            Unlike Value, will not throw an exception if there were validation errors.
            </summary>
        </member>
        <member name="T:Ctl.Data.ParseException">
            <summary>
            An exception resulting from parsing a file.
            </summary>
        </member>
        <member name="M:Ctl.Data.ParseException.#ctor">
            <summary>
            Instantiates a new ParseException.
            </summary>
        </member>
        <member name="M:Ctl.Data.ParseException.#ctor(System.String)">
            <summary>
            Instantiates a new ParseException.
            </summary>
            <param name="message">The exception's message.</param>
        </member>
        <member name="M:Ctl.Data.ParseException.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Instantiates a new ParseException.
            </summary>
            <param name="message">The exception's message.</param>
            <param name="lineNumber">The line number of the input which caused the exception.</param>
            <param name="columnNumber">The column number of the input which caused the exception.</param>
        </member>
        <member name="M:Ctl.Data.ParseException.#ctor(System.String,System.Int64,System.Int64,System.Exception)">
            <summary>
            Instantiates a new ParseException.
            </summary>
            <param name="message">The exception's message.</param>
            <param name="lineNumber">The line number of the input which caused the exception.</param>
            <param name="columnNumber">The column number of the input which caused the exception.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:Ctl.Data.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates a new ParseException from a serialized instance.
            </summary>
            <param name="info">Serialization info to deserialize from.</param>
            <param name="context">A context to use while deserializing.</param>
        </member>
        <member name="M:Ctl.Data.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the ParseException for remoting.
            </summary>
            <param name="info">Serialization info to store data to.</param>
            <param name="context">A context to use while serializing.</param>
        </member>
        <member name="P:Ctl.Data.ParseException.LineNumber">
            <summary>
            The 1-based index of the line in the file. Note this does not correspond to row, as a row can contain multiple lines.
            </summary>
        </member>
        <member name="P:Ctl.Data.ParseException.ColumnNumber">
            <summary>
            The 1-based index of the column in the line. Note this only takes into account code units, not visible grapheme clusters.
            </summary>
        </member>
        <member name="T:Ctl.Data.RowValue">
            <summary>
            Raw row values as read from an input stream.
            </summary>
        </member>
        <member name="M:Ctl.Data.RowValue.#ctor(System.Int64)">
            <summary>
            Instantiates a new RowValue.
            </summary>
            <param name="rowNumber">The 1-based index of the row in the input stream.</param>
        </member>
        <member name="M:Ctl.Data.RowValue.#ctor(System.Collections.Generic.IEnumerable{Ctl.Data.ColumnValue},System.Int64)">
            <summary>
            Instantiates a new RowValue.
            </summary>
            <param name="collection">A collection of column values for this row.</param>
            <param name="rowNumber">The 1-based index of the row in the input stream.</param>
        </member>
        <member name="M:Ctl.Data.RowValue.#ctor(System.Int32,System.Int64)">
            <summary>
            Instantiates a new RowValue.
            </summary>
            <param name="capacity">The amount of storage to pre-allocate for this row.</param>
            <param name="rowNumber">The 1-based index of the row in the input stream.</param>
        </member>
        <member name="P:Ctl.Data.RowValue.RowNumber">
            <summary>
            The 1-based index of the row in the stream.
            </summary>
        </member>
        <member name="T:Ctl.Data.SerializationException">
            <summary>
            An exception resulting from deserializing a value.
            </summary>
        </member>
        <member name="M:Ctl.Data.SerializationException.#ctor">
            <summary>
            Instantiates a new SerializationException.
            </summary>
        </member>
        <member name="M:Ctl.Data.SerializationException.#ctor(System.String)">
            <summary>
            Instantiates a new SerializationException.
            </summary>
            <param name="message">The exception's message.</param>
        </member>
        <member name="M:Ctl.Data.SerializationException.#ctor(System.Int64,System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Instantiates a new SerializationException.
            </summary>
            <param name="lineNumber">The 1-based line number of the invalid value in the input stream.</param>
            <param name="columnNumber">The 1-based column number of the invalid value in the input stream.</param>
            <param name="memberName">The member of the object which threw an exception during deserialization.</param>
            <param name="invalidValue">The serialized value which caused the exception.</param>
            <param name="innerException">The exception which occurred during deserialization.</param>
        </member>
        <member name="M:Ctl.Data.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates a new SerializationException from a serialized instance.
            </summary>
            <param name="info">Serialization info to deserialize from.</param>
            <param name="context">A context to use while deserializing.</param>
        </member>
        <member name="M:Ctl.Data.SerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the SerializationException for remoting.
            </summary>
            <param name="info">Serialization info to store data to.</param>
            <param name="context">A context to use while serializing.</param>
        </member>
        <member name="P:Ctl.Data.SerializationException.MemberName">
            <summary>
            The member of the object which threw an exception during deserialization.
            </summary>
        </member>
        <member name="P:Ctl.Data.SerializationException.InvalidValue">
            <summary>
            The serialized value which caused the exception.
            </summary>
        </member>
        <member name="T:Ctl.Data.Infrastructure.SerializedMember">
            <summary>
            Holds an aggregate of member information, boiled down from annotations.
            </summary>
        </member>
        <member name="T:Ctl.Data.Infrastructure.SerializedType`1">
            <summary>
            Caches dynamic methods and other expensive information used for type serialization.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="T:Ctl.Data.Infrastructure.SerializedType">
            <summary>
            Compiled serialization method generators.
            </summary>
        </member>
        <member name="M:Ctl.Data.Infrastructure.SerializedType.ParseObject(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Parses and returns a full object
            </summary>
        </member>
        <member name="M:Ctl.Data.Infrastructure.SerializedType.ParseMember(Ctl.Data.Infrastructure.SerializedMember,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Parses a specific member, catching any exceptions.
            </summary>
        </member>
        <member name="M:Ctl.Data.Infrastructure.SerializedType.ParseMemberValue(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Ctl.Data.Infrastructure.SerializedMember)">
            <summary>
            Parses depending on type member's type -- string, class, Nullable, or struct.
            </summary>
        </member>
        <member name="M:Ctl.Data.Infrastructure.SerializedType.CallParse(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Ctl.Data.Infrastructure.SerializedMember)">
            <summary>
            Calls the best available Parse() method for the type.
            </summary>
        </member>
        <member name="M:Ctl.Data.Infrastructure.SerializedType.CompileWriteFunc``1(System.Boolean)">
            <summary>
            Builds a function which serializes an object into a string array.
            </summary>
        </member>
        <member name="M:Ctl.Data.Infrastructure.SerializedType.CallToString(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.String)">
            <summary>
            Calls the best available ToString() method for the type.
            </summary>
        </member>
        <member name="T:Ctl.Data.ValidationException">
            <summary>
            An exception thrown when an object doesn't pass validation.
            </summary>
        </member>
        <member name="M:Ctl.Data.ValidationException.#ctor">
            <summary>
            Instantiates a new ValidationException.
            </summary>
        </member>
        <member name="M:Ctl.Data.ValidationException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult},System.Object,System.Int64,System.Int64)">
            <summary>
            Instantiates a new ValidationException.
            </summary>
            <param name="errors">Validation errors which caused this exception.</param>
            <param name="obj">The object which failed validation.</param>
            <param name="lineNumber">The 1-based line number the serialized value originated from.</param>
            <param name="columnNumber">The 1-based column number the serialized value originated from.</param>
        </member>
        <member name="M:Ctl.Data.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates a new ValidationException from a serialized instance.
            </summary>
            <param name="info">Serialization info to deserialize from.</param>
            <param name="context">A context to use while deserializing.</param>
        </member>
        <member name="M:Ctl.Data.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the ValidationException for remoting.
            </summary>
            <param name="info">Serialization info to store data to.</param>
            <param name="context">A context to use while serializing.</param>
        </member>
        <member name="P:Ctl.Data.ValidationException.Errors">
            <summary>
            Specific errors associated with the object.
            </summary>
        </member>
        <member name="P:Ctl.Data.ValidationException.Object">
            <summary>
            The object which contains validation errors.
            </summary>
        </member>
    </members>
</doc>
