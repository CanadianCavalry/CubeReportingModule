<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ctl.Data.Excel</name>
    </assembly>
    <members>
        <member name="T:Ctl.Data.Excel.ExcelObjectOptions">
            <summary>
            A set of options for reading objects from Excel files.
            </summary>
        </member>
        <member name="T:Ctl.Data.Excel.ExcelOptions">
            <summary>
            A set of options for reading Excel files.
            </summary>
        </member>
        <member name="P:Ctl.Data.Excel.ExcelOptions.TrimWhitespace">
            <summary>
            If true, leading and trailing whitespace will be trimmed from column values.
            Values consisting of only whitespace will be returned as null.
            </summary>
        </member>
        <member name="P:Ctl.Data.Excel.ExcelObjectOptions.FormatProvider">
            <summary>
            A format provider used to deserialize objects.
            </summary>
        </member>
        <member name="P:Ctl.Data.Excel.ExcelObjectOptions.ReadHeader">
            <summary>
            If true, read a header. Otherwise, use column indexes.
            </summary>
        </member>
        <member name="P:Ctl.Data.Excel.ExcelObjectOptions.HeaderComparer">
            <summary>
            A comparer used to match header values to property names.
            </summary>
        </member>
        <member name="P:Ctl.Data.Excel.ExcelObjectOptions.Validate">
            <summary>
            If true, validate objects to conform to their data annotations.
            </summary>
        </member>
        <member name="T:Ctl.Data.Excel.ExcelReader">
            <summary>
            Reads an Excel worksheet as a series of rows.
            </summary>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader.#ctor(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Instantiates a new ExcelReader.
            </summary>
            <param name="worksheet">The worksheet to read from.</param>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader.#ctor(OfficeOpenXml.ExcelWorksheet,Ctl.Data.Excel.ExcelOptions)">
            <summary>
            Instantiates a new ExcelReader.
            </summary>
            <param name="worksheet">The worksheet to read from.</param>
            <param name="options">Options for reading the worksheet. If not specified, defaults will be used.</param>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader.Read">
            <summary>
            Reads a record.
            </summary>
            <returns>If a record was read, true. Otehrwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a record.
            </summary>
            <param name="token">A token used for cancellation.</param>
            <returns>If a record was read, true. Otehrwise, false if the end of the TextReader has been reached.</returns>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader.TryRead">
            <summary>
            Tries to read a record using buffered data, without performing any I/O.
            </summary>
            <returns>If a record was read, true. Otherwise, false to indicate an exhausted buffer, indicating ReadAsync() should be called again.</returns>
        </member>
        <member name="P:Ctl.Data.Excel.ExcelReader.CurrentRow">
            <summary>
            The record read.
            </summary>
        </member>
        <member name="T:Ctl.Data.Excel.ExcelReader`1">
            <summary>
            Reads serialized objects from a TextReader
            </summary>
            <typeparam name="T">The type of object to read.</typeparam>
            <remarks>
            Any public fields or properties not annotated with NotMapped will be read. Properties must have a public getter and setter.
            The Column annotation is recognized to map members to differently named columns, and to customize their order.
            </remarks>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.IFormatProvider,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new ExcelReader.
            </summary>
            <param name="worksheet">The worksheet to read from.</param>
            <param name="formatProvider">A format provider used to deserialize objects.</param>
            <param name="readHeader">If true, read a header. Otherwise, use column indexes.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelReader`1.#ctor(OfficeOpenXml.ExcelWorksheet,Ctl.Data.Excel.ExcelObjectOptions)">
            <summary>
            Initializes a new ExcelReader.
            </summary>
            <param name="worksheet">The worksheet to read from.</param>
            <param name="options">A set of options to use. If not specified, defaults will be used.</param>
        </member>
        <member name="T:Ctl.Data.Excel.ExcelWriter">
            <summary>
            Writes a series of rows to an Excel worksheet.
            </summary>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelWriter.#ctor(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Instantiates a new ExcelReader.
            </summary>
            <param name="worksheet">The worksheet to read from.</param>
        </member>
        <member name="M:Ctl.Data.Excel.ExcelWriter`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.IFormatProvider,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new ExcelWriter.
            </summary>
            <param name="worksheet">The worksheet to write to.</param>
            <param name="formatProvider">A format provider to use for any types which implement IFormattable.</param>
            <param name="writeHeaders">If true, headers will be written to the file. Otherwise, false.</param>
            <param name="validate">If true, validate objects to conform to their data annotations.</param>
        </member>
    </members>
</doc>
